#include <stdio.h>
void display(int v,int sp_mat[20][20],int rcv[3]);

void get_mat(int sp_mat[20][20],int choice,int rcv[3])
{
  int i,j,k;
  int r,c,v;
  printf("\nENTER no of rows,columns and non-zero values:\n");
  scanf("%d %d %d",&r,&c,&v);
    rcv[0]=r;
    rcv[1]=c;
    rcv[2]=v;
 
    for(i=0;i<v;i++) 
  {
    printf("\nVALUE OF ROW NUMBER,COLUMN NO. AND VALUE:\n");
    scanf("%d %d %d",&sp_mat[i][0],&sp_mat[i][1],&sp_mat[i][2]);
  }
  
printf("\n");
if(choice==1)
{ 
  display(v,sp_mat,rcv);
 
}

}
void add(int choice,int mat1[20][20],int mat2[20][20])
{
  int rcv1[3],rcv2[3];
  get_mat(mat1,choice,rcv1);
  get_mat(mat2,choice,rcv2);
int i,j,k;
int c[20][20];
     for(i=0,j=0,k=0;i<rcv1[2] && j<rcv2[2];k++)
     {
       if(mat1[i][0]<mat2[j][0]) //comparing row
       {
         c[k][0]=mat1[i][0];
         c[k][1]=mat1[i][1];
         c[k][2]=mat1[i][2];
         i++;
         }
        else if(mat1[i][0]>mat2[j][0])  // comparing row 
       {
         c[k][0]=mat2[j][0];
         c[k][1]=mat2[j][1];
         c[k][2]=mat2[j][2];
         j++;
         }
         else  if(mat1[i][1]<mat2[j][1])  //comparing column
       {
         c[k][0]=mat1[i][0];
         c[k][1]=mat1[i][1];
         c[k][2]=mat1[i][2];
         i++;
         }
          else if(mat1[i][1]>mat2[j][1])  //comparing column
       {
         c[k][0]=mat2[j][0];
         c[k][1]=mat2[j][1];
         c[k][2]=mat2[j][2];
         j++;
         }
         else
         {
            c[k][0]=mat1[i][0];
            c[k][1]=mat1[i][1];
           c[k][2]=mat1[i][2]+mat2[j][2];
           i++;
           j++;
         }
     }
          while(i<rcv1[2])
          {
            c[k][0]=mat1[i][0];
            c[k][1]=mat1[i][1];
           c[k][2]=mat1[i][2];
            k++;
            i++;
          }
          while(j<rcv2[2])
          {
             c[k][0]=mat2[j][0];
             c[k][1]=mat2[j][1];
             c[k][2]=mat2[j][2];
             j++;
          k++;
          }

     
     printf("ADDITION");
  for(i=0;i<k;i++)
  {
    printf("\n%d\t%d\t%d",c[i][0],c[i][1],c[i][2]);
    
  }
}
void trans()
{
    int transpose[10][10],sp_mat3[10][10];
 int i,j=0,k;
  int r,c,v,ch;
  int rcv[3];
  printf("\nENTER no of rows,columns and non-zero values:\n");
  scanf("%d %d %d",&r,&c,&v);
    rcv[0]=r;
    rcv[1]=c;
    rcv[2]=v;
 
    for(i=0;i<v;i++)  
  {
    printf("\nEnter row,column index and value:\n");
    scanf("%d %d %d",&sp_mat3[i][0],&sp_mat3[i][1],&sp_mat3[i][2]);
  }
 


   for(k=0;k<c;k++)
   {
     for(i=0;i<v;i++)
     {
       if(sp_mat3[i][1]==k)
       {
          transpose[j][0]=sp_mat3[i][1];
          transpose[j][1]=sp_mat3[i][0];
          transpose[j][2]=sp_mat3[i][2];
          j++;
       }
       }
  }
  

       printf("\nAcutal Matrix:\n");
        printf("%d\t\t%d\t\t%d\n",rcv[0],rcv[1],rcv[2]);
  for(i=0;i<v;i++)
  {
    printf("%d\t\t%d\t\t%d\n",sp_mat3[i][0],sp_mat3[i][1],sp_mat3[i][2]);
  }  
   printf("\nTranspose Matrix:\n");   
    printf("%d\t\t%d\t\t%d\n",rcv[1],rcv[0],rcv[2]);
  for(i=0;i<v;i++)
  {
    printf("%d\t\t%d\t\t%d\n",transpose[i][0],transpose[i][1],transpose[i][2]);
  }

     }
   
void trans1()
{
  
  int transpose[10][10],sp_mat3[10][10];
 int i,j=0,k;
  int r,c,v,ch;
  int rcv[3];
  printf("\nENTER no of rows,columns and non-zero values:\n");
  scanf("%d %d %d",&r,&c,&v);
    rcv[0]=r;
    rcv[1]=c;
    rcv[2]=v;
 
    for(i=0;i<v;i++)  
  {
    printf("\nEnter row,column index and value:\n");
    scanf("%d %d %d",&sp_mat3[i][0],&sp_mat3[i][1],&sp_mat3[i][2]);
  }
    int loc,col_no;
  int total[c],index[c+1];
  for(i=0;i<c;i++)
  {
    total[i]=0;
  }
   for(i=0;i<v;i++)
   {
     col_no=sp_mat3[0][1];
     total[col_no]++;
   }
   index[0]=1;
   for(i=1;i<=v;i++)
   {
           index[i]=index[i-1]+total[i-1];
   }
   for(i=0;i<v;i++)
   {
     col_no=sp_mat3[0][1];
     loc=index[col_no];
     transpose[loc-1][0]=sp_mat3[i][1];
   transpose[loc-1][1]=sp_mat3[i][0];
    transpose[loc-1][2]=sp_mat3[i][2];
    index[col_no]++;
   }
   printf("\nAcutal Matrix:\n");
        printf("%d\t\t%d\t\t%d\n",rcv[0],rcv[1],rcv[2]);
  for(i=0;i<v;i++)
  {
    printf("%d\t\t%d\t\t%d\n",sp_mat3[i][0],sp_mat3[i][1],sp_mat3[i][2]);
  }  
   printf("\nTranspose Matrix:\n");   
    printf("%d\t\t%d\t\t%d\n",rcv[1],rcv[0],rcv[2]);
  for(i=0;i<v;i++)
  {
    printf("%d\t\t%d\t\t%d\n",transpose[i][0],transpose[i][1],transpose[i][2]);
  }

     
}
int main(void) {
  
  int choice;
  do{
  printf("\nEnter choice:\n1)DISPLAY THREE TUPPLE REPRESENTATION\n2)ADDITION OF MATRIX\n3)SIMPLE TRANSPOSE \n0)exit\n");
  scanf("%d",&choice);
  switch(choice)
  {
    case 1:
    {  int v;
      int sp_mat[20][20],rcv[3];
      get_mat(sp_mat,choice,rcv);

     break;
    }
    case 2:
    {
      int mat1[20][20],mat2[20][20];
      add(choice,mat1,mat2);
         break;
    }
 case 3:
    { 
     
     trans1();
     break;
    }
    
     
  }
  }while(choice!=0);

  
  return 0;

}
void display(int v,int sp_mat[20][20],int rcv[3])
{
  int i,j;
   printf("R:%d\t  C:%d\t   V:%d\n",rcv[0],rcv[1],rcv[2]);
  for(i=0;i<v;i++)
  {   
    
     for(j=0;j<3;j++)
  {
      printf("%d\t\t",sp_mat[i][j]);

  }
  printf("\n");
  }
}